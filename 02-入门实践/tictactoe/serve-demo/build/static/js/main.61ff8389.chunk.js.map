{"version":3,"sources":["index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","boards","Array","fill","map","index","boardRow","value2","index2","renderSquare","React","Component","Game","state","history","xIsNext","winner","stepNumber","drops","chooseIndex","slice","length","line","a","b","c","caculateWinner","setState","concat","step","status","current","currentSquares","moves","move","desc","drop","row","parseInt","col","jumpTo","handleClick","reverse","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.61ff8389.chunk.js","sourcesContent":["import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\n\r\n// class Square extends React.Component {\r\n//   constructor(props) {\r\n//     super(props);\r\n//     this.state = {\r\n//       value: null,\r\n//     };\r\n//   }\r\n\r\n//   render() {\r\n//     return (\r\n//       <button\r\n//         className=\"square\"\r\n//         // 获取到父组件传递的onClick方法并执行\r\n//         onClick={() => this.props.onClick()}\r\n//         //onClick={() => this.props.onClick(this.props.key)}\r\n//       >\r\n\r\n//         {/* {this.state.value} 点击状态保存在父组件中，不再需要 */}\r\n//         {this.props.value}\r\n//       </button>\r\n//     );\r\n//   }\r\n// }\r\n\r\n// 函数组件\r\nfunction Square(props) {\r\n  return (\r\n    <button className=\"square\" onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  );\r\n}\r\n\r\nclass Board extends React.Component {\r\n  // 状态提升到Game\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.state = {\r\n  //     square: Array(9).fill(null),\r\n  //     // 井字旗的轮流落子\r\n  //     xIsNext: true,\r\n  //     winner: null,\r\n  //   };\r\n  // }\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square\r\n        value={this.props.squares[i]}\r\n        onClick={() => this.props.onClick(i)}\r\n        // onClick={this.handleClick}\r\n        key={i}\r\n      />\r\n    );\r\n  }\r\n\r\n  render() {\r\n    const boards = Array(3).fill(0).map((value, index) => {\r\n      const boardRow = Array(3).fill(0).map((value2, index2) => {\r\n        // const s = this.renderSquare(index * 3 + index2);\r\n        return (this.renderSquare(index * 3 + index2));\r\n      });\r\n      // console.log(boardRow);\r\n      return <div className=\"board-row\" key={index}>{boardRow}</div>;\r\n    });\r\n    // console.log(boards);\r\n    return (\r\n      <div>\r\n        {/* 提升到Game组件中 <div className=\"status\">{status}</div> */ boards}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass Game extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n        },\r\n      ],\r\n      xIsNext: true,\r\n      winner: null,\r\n      stepNumber: 0,\r\n      drops: [],\r\n      chooseIndex: 0,\r\n    };\r\n  }\r\n  handleClick(i) {\r\n    // 胜负已经分？\r\n    // if (this.state.winner) return;\r\n    // 获取一个复制的新状态数组\r\n\r\n    // 若有跳转，根据跳转后的跳转步数对原来的历史记录进行删除，然后“续写”记录\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history.length - 1;\r\n    const squares = history[current].squares.slice();\r\n\r\n    const drops = this.state.drops.slice(0, this.state.stepNumber + 1);\r\n\r\n    // 判断此处是否落子\r\n    if (!squares[i] && !this.state.winner) {\r\n      this.state.xIsNext ? (squares[i] = \"X\") : (squares[i] = \"O\");\r\n      const winner = caculateWinner(squares);\r\n      this.setState({\r\n        history: history.concat([\r\n          {\r\n            squares: squares,\r\n          },\r\n        ]),\r\n        xIsNext: !this.state.xIsNext,\r\n        winner: winner,\r\n        stepNumber: history.length,\r\n        drops: drops.concat([i]),\r\n        chooseIndex: this.state.chooseIndex + 1,\r\n      });\r\n    }\r\n  }\r\n  jumpTo(step) {\r\n    // 无意义跳转处理\r\n    if (step === this.state.stepNumber) return;\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: step % 2 === 0,\r\n      // 重置winner\r\n      winner: null,\r\n      chooseIndex: step,\r\n    });\r\n  }\r\n  render() {\r\n    // 判断状态\r\n    let status = \"Next player: \" + (this.state.xIsNext ? \"X\" : \"O\");\r\n    if (this.state.winner) {\r\n      status = \"The winner: \" + this.state.winner;\r\n    } else if (this.state.stepNumber === 9) {\r\n      status = \"No winner!\";\r\n    }\r\n    // 获取当前旗局\r\n    const current = this.state.stepNumber;\r\n    const currentSquares = this.state.history[current];\r\n\r\n    // 遍历history操作的元素，获取历史记录的React元素\r\n    let moves = this.state.history.map((step, move) => {\r\n      // step: 历史记录中的每一步，就是history状态的每个布局\r\n      // move: 索引，可以表示要去的落子点\r\n\r\n      // 根据索引判断每步的描述，第0步就是初始棋盘\r\n      const desc = move ? \"Go to move #\" + move : \"Go to Game start\";\r\n      const drop = move\r\n        ? {\r\n            row: parseInt(this.state.drops[move - 1] / 3) + 1,\r\n            col: (this.state.drops[move - 1] % 3) + 1,\r\n            status: move % 2 ? \"X\" : \"O\",\r\n          }\r\n        : {\r\n            row: -1,\r\n            col: -1,\r\n            status: null,\r\n          };\r\n\r\n      // 返回每一个棋盘布局(一个React元素)\r\n      return (\r\n        <li\r\n          key={move}\r\n          className={move === this.state.chooseIndex ? \"highlight\" : \"normal\"}\r\n        >\r\n          <span>{move + 1 + \".  \"}</span>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n          &nbsp;<span>坐标: {\"(\" + drop.row + \", \" + drop.col + \")\"}</span>\r\n          <span> 落子: {drop.status} </span>\r\n        </li>\r\n      );\r\n    });\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board // 传递当前局面和点击处理方法\r\n            squares={currentSquares.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <button \r\n            onClick={() => \r\n              {\r\n                moves.reverse();\r\n              }\r\n            }\r\n          >\r\n            更改顺序\r\n          </button>\r\n          <ol className=\"step-list\">{moves}</ol>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n// 判断胜者\r\nfunction caculateWinner(squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [0, 4, 8],\r\n    [1, 4, 7],\r\n    [2, 4, 6],\r\n    [2, 5, 8],\r\n  ];\r\n  for (let line of lines) {\r\n    const [a, b, c] = line;\r\n    // console.log(line)\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return squares[a];\r\n    }\r\n  }\r\n  return null;\r\n}\r\n// ========================================\r\n\r\nReactDOM.render(<Game />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}